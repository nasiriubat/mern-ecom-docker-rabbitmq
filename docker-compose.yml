# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

version: "4"

services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.
  server-a:
    # Change the image information to match your server A image
    image: web-architecture/server-a-image:latest
    # $USERNAME/$IMAGENAME:$TAG, something like group000/node-swagger:3a
    # 'depends_on' and 'command' are  to be used when used
    # with RabbitMQ service in this file. 'depends_on' must be set
    # to RabbitMQ service's name from this file, and 'command'
    # can be modified to be anything, but what is given should
    # work. Just uncomment them
    depends_on:
      - rapid-runner-rabbit
      - mongo
    command:
      [
        "./utils/wait-for-it.sh",
        "rapid-runner-rabbit:5672",
        "--",
        "npm",
        "start",
      ]
    build:
      dockerfile: Dockerfile
      context: ./backend/server-a
    ports:
      - "8080:8080"
    expose:
      - "8080"
    networks:
      - backend

  # You can base this service on a rabbitmq Docker Hub image.
  # You need to expose the RabbitMQ port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  # rapid-runner-rabbit:
  #   image:
  #   ports:
  #   expose:
  #   networks:
  # RabbitMQ service
  rapid-runner-rabbit:
    image: rabbitmq:latest # RabbitMQ Docker image
    ports:
      - "5672" # Port mapping for RabbitMQ
    expose:
      - "5672" # Expose port for RabbitMQ
    networks:
      - backend # Connect RabbitMQ to the backend network

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  # Server B service
  server-b:
    # Change the image information to match your server B image
    image: web-architecture/server-b-image:latest
    # Build configuration for server B
    command:
      [
        "./utils/wait-for-it.sh",
        "rapid-runner-rabbit:5672",
        "--",
        "npm",
        "start",
      ]
    build:
      dockerfile: Dockerfile # Path to the Dockerfile for server B
      context: ./backend/server-b # Context directory for building server B image
    ports:
      - "8081"
    expose:
      - "8081"
    networks:
      - backend # Connect server B to the backend network

  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases
  # database-service would go here.
  #database:
  mongo:
    image: mongo:latest
    volumes:
      - mongo-data:/data/db
    ports:
      - 27017:27017
    networks:
      - backend

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:
# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
volumes:
  mongo-data:
